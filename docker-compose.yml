services:
  ecc-provider:
    image: rdlabengpa/ids_execution_core_container:v1.11.0
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    logging:
      options:
        max-size: "200M"
    networks:
      - clarus_network

    container_name: ecc-provider
    ports:
      - "${PROVIDER_PORT}:${INTERNAL_REST_PORT}"  #Port for exposing HTTP endpoints
      - "8889:8889"                               #Exposed port for receiving data from another connector (REST)
      - "8086:8086"                               #Exposed port for receiving data from another connector (WS)
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_ENDPOINT=${PROVIDER_DATA_APP_ENDPOINT}      #Data APP enpoint for consuming received data
      - MULTIPART_EDGE=${PROVIDER_MULTIPART_EDGE}                      #Data APP endpoint multipart/mixed content type
      - MULTIPART_ECC=${MULTIPART_ECC}
      - REST_ENABLE_HTTPS=${REST_ENABLE_HTTPS}
      - IDSCP2=${IDSCP2}
      - WS_EDGE=${PROVIDER_WS_EDGE}
      - WS_ECC=${WS_ECC}
      - UC_DATAAPP_URI=http://uc-dataapp-provider:8080/platoontec/PlatoonDataUsage/1.0/
      - CLEARING_HOUSE=${CLEARING_HOUSE}
      - PUBLIC_PORT=${PROVIDER_PORT}
      - BROKER_URL=${BROKER_URL}
      - DISABLE_SSL_VALIDATION=${DISABLE_SSL_VALIDATION}
      - CACHE_TOKEN=${CACHE_TOKEN}
      - FETCH_TOKEN_ON_STARTUP=${FETCH_TOKEN_ON_STARTUP}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - DAPS_KEYSTORE_NAME=${PROVIDER_DAPS_KEYSTORE_NAME}
      - DAPS_KEYSTORE_PASSWORD=${PROVIDER_DAPS_KEYSTORE_PASSWORD}
      - DAPS_KEYSTORE_ALIAS=${PROVIDER_DAPS_KEYSTORE_ALIAS}
      - TRUSTORE_NAME=${TRUSTORE_NAME}
      - TRUSTORE_PASSWORD=${TRUSTORE_PASSWORD}
      - TZ=Europe/Rome
    volumes:
      - ./ecc_resources_provider:/config
      - ./ecc_cert:/cert
      - ecc_provider_log:/var/log/ecc
      - ecc_provider_sd:/sd
    extra_hosts:
      - "ecc-provider:172.17.0.1"

  uc-dataapp-provider:
    image: rdlabengpa/ids_uc_data_app_platoon:v1.5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      options:
        max-size: "100M"
    networks:
      - clarus_network
    container_name: uc-dataapp-provider
    environment:
      - TZ=Europe/Rome
    expose:
      - "8080"
    volumes:
      - ./uc-dataapp_resources_provider:/etc
      - uc_provider_data:/data

  be-dataapp-provider:
    #image: rdlabengpa/ids_be_data_app:v0.2.5
    image: clarusproject/clarus_webserver_data_app:0.0.1
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      options:
        max-size: "100M"
    networks:
      - clarus_network
    container_name: be-dataapp-provider
    ports:
      - "8083:8083"
      - "9009:9000"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_MULTIPART=${PROVIDER_MULTIPART_EDGE}
      - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - ECC_HOSTNAME=ecc-provider
      - ECC_PORT=8887
      - TZ=Europe/Rome
      - ISSUER_CONNECTOR_URI=${PROVIDER_ISSUER_CONNECTOR_URI}
      - EXTRACT_PAYLOAD_FROM_RESPONSE=${EXTRACT_PAYLOAD_FROM_RESPONSE}
    volumes:
      - ./be-dataapp_resources:/config
      - ./ecc_cert:/cert
      - be_dataapp_data_provider:/data

  # ecc-consumer:
  #   image: rdlabengpa/ids_execution_core_container:v1.11.0
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 1024M
  #   logging:
  #     options:
  #       max-size: "200M"
  #   networks:
  #     - clarus_network

  #   container_name: ecc-consumer
  #   ports:
  #     - "${CONSUMER_PORT}:${INTERNAL_REST_PORT}"  #Port for exposing HTTP endpoints
  #     - "8890:8889"                               #Exposed port for receiving data from another connector (REST)
  #     - "8087:8086"                               #Exposed port for receiving data from another connector (WS)
  #   environment:
  #     - "SPRING_PROFILES_ACTIVE=docker"
  #     - DATA_APP_ENDPOINT=${CONSUMER_DATA_APP_ENDPOINT}    #Data APP enpoint for consuming received data
  #     - MULTIPART_EDGE=${CONSUMER_MULTIPART_EDGE}          #Data APP endpoint multipart/mixed content type
  #     - MULTIPART_ECC=${MULTIPART_ECC}
  #     - REST_ENABLE_HTTPS=${REST_ENABLE_HTTPS}
  #     - IDSCP2=${IDSCP2}
  #     - WS_EDGE=${CONSUMER_WS_EDGE}
  #     - WS_ECC=${WS_ECC}
  #     - CLEARING_HOUSE=${CLEARING_HOUSE}
  #     - UC_DATAAPP_URI=http://uc-dataapp-consumer:8080/platoontec/PlatoonDataUsage/1.0/
  #     - PUBLIC_PORT=${CONSUMER_PORT}
  #     - BROKER_URL=${BROKER_URL}
  #     - DISABLE_SSL_VALIDATION=${DISABLE_SSL_VALIDATION}
  #     - CACHE_TOKEN=${CACHE_TOKEN}
  #     - FETCH_TOKEN_ON_STARTUP=${FETCH_TOKEN_ON_STARTUP}
  #     - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
  #     - KEYSTORE_NAME=${KEYSTORE_NAME}
  #     - KEY_PASSWORD=${KEY_PASSWORD}
  #     - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
  #     - ALIAS=${ALIAS}
  #     - DAPS_KEYSTORE_NAME=${CONSUMER_DAPS_KEYSTORE_NAME}
  #     - DAPS_KEYSTORE_PASSWORD=${CONSUMER_DAPS_KEYSTORE_PASSWORD}
  #     - DAPS_KEYSTORE_ALIAS=${CONSUMER_DAPS_KEYSTORE_ALIAS}
  #     - TRUSTORE_NAME=${TRUSTORE_NAME}
  #     - TRUSTORE_PASSWORD=${TRUSTORE_PASSWORD}
  #     - TZ=Europe/Rome
  #   volumes:
  #     - ./ecc_resources_consumer:/config
  #     - ./ecc_cert:/cert
  #     - ecc_consumer_log:/var/log/ecc
  #     - ecc_consumer_sd:/sd
  #   extra_hosts:
  #     - "ecc-consumer:172.17.0.1"

  # uc-dataapp-consumer:
  #   image: rdlabengpa/ids_uc_data_app_platoon:v1.5
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 512M
  #   logging:
  #     options:
  #       max-size: "100M"
  #   networks:
  #     - clarus_network
  #   container_name: uc-dataapp-consumer
  #   environment:
  #     - TZ=Europe/Rome
  #   expose:
  #     - "8080"
  #   volumes:
  #     - ./uc-dataapp_resources_consumer:/etc
  #     - uc_consumer_data:/data

  # be-dataapp-consumer:
  #   image: rdlabengpa/ids_be_data_app:v0.2.5
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 512M
  #   logging:
  #     options:
  #       max-size: "100M"
  #   networks:
  #     - clarus_network
  #   container_name: be-dataapp-consumer
  #   ports:
  #     - "8084:8083"
  #     - "9001:9000"
  #   environment:
  #     - "SPRING_PROFILES_ACTIVE=docker"
  #     - DATA_APP_MULTIPART=${CONSUMER_MULTIPART_EDGE}
  #     - SERVER_SSL_ENABLED=${SERVER_SSL_ENABLED}
  #     - KEYSTORE_NAME=${KEYSTORE_NAME}
  #     - KEY_PASSWORD=${KEY_PASSWORD}
  #     - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
  #     - ALIAS=${ALIAS}
  #     - ECC_HOSTNAME=ecc-consumer
  #     - EXTRACT_PAYLOAD_FROM_RESPONSE=${EXTRACT_PAYLOAD_FROM_RESPONSE}
  #     - ECC_PORT=8887
  #     - TZ=Europe/Rome
  #     - ISSUER_CONNECTOR_URI=${CONSUMER_ISSUER_CONNECTOR_URI}
  #   volumes:
  #     - ./be-dataapp_resources:/config
  #     - ./ecc_cert:/cert
  #     - be_dataapp_data_consumer:/data
      

  clarus-agent:    
    # build: .
    image: clarusproject/clarus_agent:0.0.1
    #build: ../code/clarus_edge_agent
    #pull_policy: if_not_present
    hostname: clarus-agent
    container_name: clarus-agent
    #restart: unless-stopped
   
    networks:
      - clarus_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config.json:/root/.docker/config.json
      - clarus_models:/app/clarus_models

    environment:  
      - NETWORK-NAME=clarus_provider
      - REST-PORT=8082  
      #- IDS-PROVIDER-IP=172.16.56.42
      #- IDS-PROVIDER-PORT=8889
      - IDS-PROVIDER-IP=${PROVIDER_MODEL_CLOUD_IP}
      - IDS-PROVIDER-PORT=${PROVIDER_MODEL_CLOUD_PORT}
      - IDS-CONSUMER-IP=be-dataapp-provider
      - IDS-CONSUMER-PORT=8083
      - MAPPING-MODELS-FOLDER=clarus_models
      - FORCE-PULL-IMAGE=true
    ports:
      - 8082:8082
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  clarus-inference:
        #image: clarusproject/clarus_inference:0.0.1
        build: ./code/clarus_edge_inference
        container_name: clarus-inference
        hostname: clarus-inference
        ports:
            - 7040:7040
        volumes:
            - clarus_models:/code/model
        networks: 
            - clarus_network

  clarus-drift-detector:
        #image: clarusproject/clarus_edge_drift_detection:0.0.1
        build: ./code/clarus_edge_drift_detector
        container_name: clarus-drift-detector
        hostname: clarus-drift-detector
        ports:
            - 5001:5000
        volumes:
            - ./code/clarus_edge_drift_detector/app/clarus_reports:/app/app/clarus_reports
        networks: 
            - clarus_network

  clarus-update-model:
        #image: clarusproject/clarus_edge_update_model:0.0.1
        build: ./code/clarus_edge_model_update
        container_name: clarus-update-model
        hostname: clarus-update-model
        networks: 
            - clarus_network

  clarus-hmi:
        image: clarusproject/clarus_hmi:0.0.1
        #build: ../code/clarus-hmi
        container_name: clarus-hmi
        hostname: clarus-hmi
        ports:
            - 3000:3000
        networks: 
          - clarus_network
          

  clarus-proxy:
        image: clarusproject/clarus_proxy:0.0.1
        #build: ../code/clarus_proxy
        container_name: clarus-proxy
        hostname: clarus-proxy
        ports:
            - 5004:5000
        networks: 
          - clarus_network
                 


networks:
  clarus_network: { }


volumes:
  ecc_provider_log : {}
  ecc_provider_sd : {}
  uc_provider_data : {}
  be_dataapp_data_provider : {}
  clarus_models : {}
