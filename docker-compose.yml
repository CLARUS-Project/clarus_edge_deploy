version: '3.1'
services:
  ecc-provider:
    image: rdlabengpa/ids_execution_core_container:v1.14.3
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    logging:
      options:
        max-size: "200M"
    networks:
      - clarus_network

    container_name: ecc-provider
    ports:
      - "${PROVIDER_PORT}:8449" #Port for exposing HTTP endpoints
      - "8889:8889" #Exposed port for receiving data from another connector (REST)
      - "8086:8086" #Exposed port for receiving data from another connector (WS)
    environment:
      - "JDK_JAVA_OPTIONS=-Xmx1024m"
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_ENDPOINT=${PROVIDER_DATA_APP_ENDPOINT} #Data APP enpoint for consuming received data
      - MULTIPART_EDGE=${PROVIDER_MULTIPART_EDGE} #Data APP endpoint multipart/mixed content type
      - MULTIPART_ECC=${MULTIPART_ECC}
      - CONNECTOR_ID=${PROVIDER_ISSUER_CONNECTOR_URI}
      - IDSCP2=${IDSCP2}
      - WS_EDGE=${PROVIDER_WS_EDGE}
      - WS_ECC=${WS_ECC}
      - UC_DATAAPP_URI=https://uc-dataapp-provider:8080/platoontec/PlatoonDataUsage/1.0/
      - BROKER_URL=${BROKER_URL}
      - CACHE_TOKEN=${CACHE_TOKEN}
      - FETCH_TOKEN_ON_STARTUP=${FETCH_TOKEN_ON_STARTUP}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - DAPS_KEYSTORE_NAME=${PROVIDER_DAPS_KEYSTORE_NAME}
      - DAPS_KEYSTORE_PASSWORD=${PROVIDER_DAPS_KEYSTORE_PASSWORD}
      - DAPS_KEYSTORE_ALIAS=${PROVIDER_DAPS_KEYSTORE_ALIAS}
      - TRUSTORE_NAME=${TRUSTORE_NAME}
      - TRUSTORE_PASSWORD=${TRUSTORE_PASSWORD}
      - FIREWALL=${PROVIDER_ECC_FIREWALL}
      - TZ=Europe/Rome
    volumes:
      - ./ecc_resources_provider:/config
      - ./ecc_cert:/cert
      - ecc_provider_data:/home/nobody/data/
    extra_hosts:
      - "ecc-provider:172.17.0.1"

  uc-dataapp-provider:
    image: rdlabengpa/ids_uc_data_app_platoon:v1.7.5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      options:
        max-size: "100M"
    networks:
      - clarus_network
    container_name: uc-dataapp-provider
    environment:
      - "JDK_JAVA_OPTIONS=-Xmx512m"
      - ECC_PORT=8449
      - ECC_SELF_DESCRIPTION_URL=${PROVIDER_ECC_SELF_DESCRIPTION_URL}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - TZ=Europe/Rome
    expose:
      - "8080"
    volumes:
      - ./uc-dataapp_resources_provider:/etc
      - uc_provider_data:/data
      - ./ecc_cert:/cert

  uc-dataapp-pip-provider:
    image: rdlabengpa/ids_uc_data_app_platoon_pip:v1.0.0
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 256M
    logging:
      options:
        max-size: "100M"
    networks:
      - clarus_network
    container_name: uc-dataapp-pip-provider
    environment:
      - "JDK_JAVA_OPTIONS=-Xmx256m"
      - TZ=Europe/Rome
    expose:
      - "8085"
    volumes:
      - ./uc-dataapp-pip_resources_provider:/etc

  be-dataapp-provider:
    #image: rdlabengpa/ids_be_data_app:v0.3.2
    image: clarusproject/clarus_edge_data_app:0.1.0
    #image: clarus_webserver_data_app:0.1.0
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      options:
        max-size: "100M"
    networks:
      - clarus_network
    container_name: be-dataapp-provider
    ports:
      - "8183:8183"
    expose:
      - "9000"
    environment:
      - "JDK_JAVA_OPTIONS=-Xmx512m"
      - "SPRING_PROFILES_ACTIVE=docker"
      - DATA_APP_MULTIPART=${PROVIDER_MULTIPART_EDGE}
      - KEYSTORE_NAME=${KEYSTORE_NAME}
      - KEY_PASSWORD=${KEY_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - ALIAS=${ALIAS}
      - ECC_HOSTNAME=ecc-provider
      - EXTRACT_PAYLOAD_FROM_RESPONSE=${EXTRACT_PAYLOAD_FROM_RESPONSE}
      - ECC_PORT=8887
      - TZ=Europe/Rome
      - ISSUER_CONNECTOR_URI=${PROVIDER_ISSUER_CONNECTOR_URI}
      - FIREWALL=${PROVIDER_DATA_APP_FIREWALL}
      - MINIO_URI=${MINIO_URI}
      - MINIO_USERNAME=${MINIO_USERNAME}
      - MINIO_PASSWORD=${MINIO_PASSWORD} 
    volumes:
      - ./be-dataapp_resources:/config
      - be_dataapp_provider_data:/home/nobody/data/
      - ./ecc_cert:/cert
     

 
      

  clarus-agent:
    
    # build: .
    image: clarusproject/clarus_agent:0.1.0
    #build: ../code/clarus_edge_agent
    #pull_policy: if_not_present
    hostname: clarus-agent
    container_name: clarus-agent
    #restart: unless-stopped
   
    networks:
      - clarus_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config.json:/root/.docker/config.json
      - clarus_models:/app/clarus_models

    environment:  
      - NETWORK-NAME=clarus_provider
      - REST-PORT=8082  
      #- IDS-PROVIDER-IP=172.16.56.42
      #- IDS-PROVIDER-PORT=8889
      - IDS-PROVIDER-IP=${PROVIDER_MODEL_CLOUD_IP}
      - IDS-PROVIDER-PORT=${PROVIDER_MODEL_CLOUD_PORT}
      - IDS-CONSUMER-IP=be-dataapp-provider
      - IDS-CONSUMER-PORT=8183
      - MAPPING-MODELS-FOLDER=clarus_models
      - FORCE-PULL-IMAGE=true
    ports:
      - 8082:8082
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  clarus-inference:

        #image: clarusproject/clarus_inference:0.0.1
        build: ./code/clarus_edge_inference
        container_name: clarus-inference
        hostname: clarus-inference
        ports:
            - 7040:7040
        volumes:
            - clarus_models:/code/model
        networks: 
            - clarus_network

  clarus-hmi:

        image: clarusproject/clarus_hmi:0.1.0
        #build: ../code/clarus-hmi
        container_name: clarus-hmi
        hostname: clarus-hmi
        ports:
            - 3000:3000
        networks: 
          - clarus_network
          

  clarus-proxy:

        image: clarusproject/clarus_proxy:0.0.1
        #build: ../code/clarus_proxy
        container_name: clarus-proxy
        hostname: clarus-proxy
        ports:
            - 5004:5000
        networks: 
          - clarus_network
                 


networks:
  clarus_network: { }


volumes:
   ecc_provider_data: {}
   uc_provider_data: {}
   be_dataapp_provider_data:
     external: true
   clarus_models : {}
